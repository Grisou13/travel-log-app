/**
 * Teleport
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { FlockMeetingPlaceCity } from './flockMeetingPlaceCity';
import { FlockMeetingPlacePeopleGroup } from './flockMeetingPlacePeopleGroup';


/**
 * A meeting place
 */
export interface FlockMeetingPlace { 
    /**
     * Average traveling time in hours per traveling person (=total_time_h/number_of_people_traveling)
     */
    averageTimeHPerTravelingPerson: number;
    city: FlockMeetingPlaceCity;
    /**
     * Whether this meeting place is home to at least one people group
     */
    isHome: boolean;
    /**
     * Number of people whose source location is not the same as the meeting place (is_home==false)
     */
    numberOfPeopleTraveling: number;
    /**
     * Detailed information for each people group (order matches the people group order in plan request)
     */
    peopleGroups: Array<FlockMeetingPlacePeopleGroup>;
    /**
     * Total flight cost, in USD
     */
    totalCostUsd: number;
    /**
     * Total distance traveled in kilometers
     */
    totalDistanceKm: number;
    /**
     * Total flight time in hours
     */
    totalFlightTimeH: number;
    /**
     * Total flights, including connecting flights (=total_tickets+total_layovers)
     */
    totalFlights: number;
    /**
     * Total layovers (stops) all people have to take (each connecting person counts for one)
     */
    totalLayovers: number;
    /**
     * Number of groups of people who have layovers
     */
    totalRouteLayovers: number;
    /**
     * Number of groups of people who should fly to get to this meeting place
     */
    totalRoutes: number;
    /**
     * Total tickets (one per flyingperson) that should be issued
     */
    totalTickets: number;
    /**
     * Total traveling time in hours, including flight (total_flight_time_h) and ground transport time
     */
    totalTimeH: number;
}
