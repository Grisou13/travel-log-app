/**
 * Teleport
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
} from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable, map, switchMap } from 'rxjs';

import { City } from '../model/city';
import { CityAlternateNames } from '../model/cityAlternateNames';
import { CitySearchResults } from '../model/citySearchResults';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';
import { CitySearchResultsItem } from '../model/citySearchResultsItem';

@Injectable()
export class CitiesService {
  protected basePath = 'https://api.teleport.org/api';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   * Get alternate names for a city
   *
   * @param cityId The city ID, consisting of ID scheme and ID, separated by colon (e.g. geonameid:5391959)
   * @param embed Relationship paths to embed in the response
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getCityAlternateNames(
    cityId: string,
    embed?: Array<string>,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<CityAlternateNames>;
  public getCityAlternateNames(
    cityId: string,
    embed?: Array<string>,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<CityAlternateNames>>;
  public getCityAlternateNames(
    cityId: string,
    embed?: Array<string>,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<CityAlternateNames>>;
  public getCityAlternateNames(
    cityId: string,
    embed?: Array<string>,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (cityId === null || cityId === undefined) {
      throw new Error(
        'Required parameter cityId was null or undefined when calling getCityAlternateNames.'
      );
    }

    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec(),
    });
    if (embed) {
      embed.forEach((element) => {
        queryParameters = queryParameters.append('embed', <any>element);
      });
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/vnd.teleport.v1+json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/vnd.teleport.v1+json'];

    return this.httpClient.get<CityAlternateNames>(
      `${this.basePath}/cities/${encodeURIComponent(
        String(cityId)
      )}/alternate_names/`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Get city information
   *
   * @param cityId The city ID, consisting of ID scheme and ID, separated by colon (e.g. geonameid:5391959)
   * @param embed Relationship paths to embed in the response
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getCityByID(
    cityId: string,
    embed?: Array<string>,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<City>;
  public getCityByID(
    cityId: string,
    embed?: Array<string>,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<City>>;
  public getCityByID(
    cityId: string,
    embed?: Array<string>,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<City>>;
  public getCityByID(
    cityId: string,
    embed?: Array<string>,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (cityId === null || cityId === undefined) {
      throw new Error(
        'Required parameter cityId was null or undefined when calling getCityByID.'
      );
    }

    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec(),
    });
    if (embed) {
      embed.forEach((element) => {
        queryParameters = queryParameters.append('embed', <any>element);
      });
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/vnd.teleport.v1+json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/vnd.teleport.v1+json'];

    return this.httpClient.get<City>(
      `${this.basePath}/cities/${encodeURIComponent(String(cityId))}/`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Find cities by name
   *
   * @param search Text to search for
   * @param limit The number of results to return (max 25)
   * @param embed Relationship paths to embed in the response
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */

  public searchCities(
    search: string,
    limit?: number,
    embed?: Array<string>,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<CitySearchResults>;
  public searchCities(
    search: string,
    limit?: number,
    embed?: Array<string>,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<CitySearchResults>>;
  public searchCities(
    search: string,
    limit?: number,
    embed?: Array<string>,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<CitySearchResults>>;
  public searchCities(
    search: string,
    limit?: number,
    embed?: Array<string>,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (search === null || search === undefined) {
      throw new Error(
        'Required parameter search was null or undefined when calling searchCities.'
      );
    }

    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec(),
    });
    if (search !== undefined && search !== null) {
      queryParameters = queryParameters.set('search', <any>search);
    }
    if (limit !== undefined && limit !== null) {
      queryParameters = queryParameters.set('limit', <any>limit);
    }
    if (embed) {
      embed.forEach((element) => {
        queryParameters = queryParameters.append('embed', <any>element);
      });
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/vnd.teleport.v1+json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/vnd.teleport.v1+json'];

    return this.httpClient.get<CitySearchResults>(`${this.basePath}/cities/`, {
      params: queryParameters,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }
}
