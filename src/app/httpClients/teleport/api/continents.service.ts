/**
 * Teleport
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@angular/core';
import {
  HttpClient,
  HttpHeaders,
  HttpParams,
  HttpResponse,
  HttpEvent,
} from '@angular/common/http';
import { CustomHttpUrlEncodingCodec } from '../encoder';

import { Observable } from 'rxjs';

import { Continent } from '../model/continent';
import { ContinentCountryList } from '../model/continentCountryList';
import { ContinentList } from '../model/continentList';
import { ContinentUrbanAreaList } from '../model/continentUrbanAreaList';

import { BASE_PATH, COLLECTION_FORMATS } from '../variables';
import { Configuration } from '../configuration';

@Injectable()
export class ContinentsService {
  protected basePath = 'https://api.teleport.org/api';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(
    protected httpClient: HttpClient,
    @Optional() @Inject(BASE_PATH) basePath: string,
    @Optional() configuration: Configuration
  ) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }

  /**
   * Get continent information
   *
   * @param continentId The continent ID, consisting of ID scheme and ID, separated by colon (e.g. geonames:NA)
   * @param embed Relationship paths to embed in the response
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public getContinentByID(
    continentId: string,
    embed?: Array<string>,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<Continent>;
  public getContinentByID(
    continentId: string,
    embed?: Array<string>,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<Continent>>;
  public getContinentByID(
    continentId: string,
    embed?: Array<string>,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<Continent>>;
  public getContinentByID(
    continentId: string,
    embed?: Array<string>,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (continentId === null || continentId === undefined) {
      throw new Error(
        'Required parameter continentId was null or undefined when calling getContinentByID.'
      );
    }

    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec(),
    });
    if (embed) {
      embed.forEach((element) => {
        queryParameters = queryParameters.append('embed', <any>element);
      });
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/vnd.teleport.v1+json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/vnd.teleport.v1+json'];

    return this.httpClient.get<Continent>(
      `${this.basePath}/continents/${encodeURIComponent(String(continentId))}/`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Get continent country list
   *
   * @param continentId The continent ID, consisting of ID scheme and ID, separated by colon (e.g. geonames:NA)
   * @param embed Relationship paths to embed in the response
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listContinentCountries(
    continentId: string,
    embed?: Array<string>,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<ContinentCountryList>;
  public listContinentCountries(
    continentId: string,
    embed?: Array<string>,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<ContinentCountryList>>;
  public listContinentCountries(
    continentId: string,
    embed?: Array<string>,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<ContinentCountryList>>;
  public listContinentCountries(
    continentId: string,
    embed?: Array<string>,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (continentId === null || continentId === undefined) {
      throw new Error(
        'Required parameter continentId was null or undefined when calling listContinentCountries.'
      );
    }

    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec(),
    });
    if (embed) {
      embed.forEach((element) => {
        queryParameters = queryParameters.append('embed', <any>element);
      });
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/vnd.teleport.v1+json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/vnd.teleport.v1+json'];

    return this.httpClient.get<ContinentCountryList>(
      `${this.basePath}/continents/${encodeURIComponent(
        String(continentId)
      )}/countries/`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * Get continent urban area list
   *
   * @param continentId The continent ID, consisting of ID scheme and ID, separated by colon (e.g. geonames:NA)
   * @param embed Relationship paths to embed in the response
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listContinentUrbanAreas(
    continentId: string,
    embed?: Array<string>,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<ContinentUrbanAreaList>;
  public listContinentUrbanAreas(
    continentId: string,
    embed?: Array<string>,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<ContinentUrbanAreaList>>;
  public listContinentUrbanAreas(
    continentId: string,
    embed?: Array<string>,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<ContinentUrbanAreaList>>;
  public listContinentUrbanAreas(
    continentId: string,
    embed?: Array<string>,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    if (continentId === null || continentId === undefined) {
      throw new Error(
        'Required parameter continentId was null or undefined when calling listContinentUrbanAreas.'
      );
    }

    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec(),
    });
    if (embed) {
      embed.forEach((element) => {
        queryParameters = queryParameters.append('embed', <any>element);
      });
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/vnd.teleport.v1+json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/vnd.teleport.v1+json'];

    return this.httpClient.get<ContinentUrbanAreaList>(
      `${this.basePath}/continents/${encodeURIComponent(
        String(continentId)
      )}/urban_areas/`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress,
      }
    );
  }

  /**
   * List all continents
   *
   * @param embed Relationship paths to embed in the response
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public listContinents(
    embed?: Array<string>,
    observe?: 'body',
    reportProgress?: boolean
  ): Observable<ContinentList>;
  public listContinents(
    embed?: Array<string>,
    observe?: 'response',
    reportProgress?: boolean
  ): Observable<HttpResponse<ContinentList>>;
  public listContinents(
    embed?: Array<string>,
    observe?: 'events',
    reportProgress?: boolean
  ): Observable<HttpEvent<ContinentList>>;
  public listContinents(
    embed?: Array<string>,
    observe: any = 'body',
    reportProgress: boolean = false
  ): Observable<any> {
    let queryParameters = new HttpParams({
      encoder: new CustomHttpUrlEncodingCodec(),
    });
    if (embed) {
      embed.forEach((element) => {
        queryParameters = queryParameters.append('embed', <any>element);
      });
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/vnd.teleport.v1+json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/vnd.teleport.v1+json'];

    return this.httpClient.get<ContinentList>(`${this.basePath}/continents/`, {
      params: queryParameters,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
      observe: observe,
      reportProgress: reportProgress,
    });
  }
}
